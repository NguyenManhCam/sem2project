loadApiDef({
    "swagger": "2.0",
    "info": {
        "description": "This document intends to provide Global Icon system API information to mobile and web developers who would like to connect their systems to the Global Icon system. The Global Icon system APIs comply with the RESTful Web Services standard, and are suitable for both the HTTP and HTTPS protocols. This document will only be accessible if the server is running in development mode. For further information and support, please contact the developer by selecting the link below. <span class='description_readMore'>Read more</span><br/><br/> Left Menu shows name (bold-grey text) of all data models of system. You can select a model name and to see relevant API methods supported and details of the model.",
        "version": "1.0.0",
        "title": "Global Icon API Definition",
        "termsOfService": "http://monsterapps.com.au/terms/",
        "contact": {
            "email": "devsupport@monsterapps.com.au"
        },
        "license": {
            "name": "copyright Â© Monster Apps Pty",
            "url": "http://monsterapps.com.au/LICENSE-2.0.html"
        }
    },
    "basePath": "/api",
    "paths": {
        "/Roles/{id}/principals/{fk}": {
            "get": {
                "tags": [
                    "Role"
                ],
                "summary": "Find a related item by id for principals.",
                "operationId": "Role.prototype.__findById__principals",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for principals",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/RoleMapping"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Role"
                ],
                "summary": "Delete a related item by id for principals.",
                "operationId": "Role.prototype.__destroyById__principals",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for principals",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Role"
                ],
                "summary": "Update a related item by id for principals.",
                "operationId": "Role.prototype.__updateById__principals",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for principals",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RoleMapping"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/RoleMapping"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Roles/{id}/principals": {
            "get": {
                "tags": [
                    "Role"
                ],
                "summary": "Queries principals of Role.",
                "operationId": "Role.prototype.__get__principals",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RoleMapping"
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Role"
                ],
                "summary": "Creates a new instance in principals of this model.",
                "operationId": "Role.prototype.__create__principals",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RoleMapping"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/RoleMapping"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Role"
                ],
                "summary": "Deletes all principals of this model.",
                "operationId": "Role.prototype.__delete__principals",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/Roles/{id}/principals/count": {
            "get": {
                "tags": [
                    "Role"
                ],
                "summary": "Counts principals of Role.",
                "operationId": "Role.prototype.__count__principals",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Roles": {
            "post": {
                "tags": [
                    "Role"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "Role.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "Role"
                ],
                "summary": "Patch an existing model instance or insert a new one into the data source.",
                "operationId": "Role.patchOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Role"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "Role.replaceOrCreate__put_Roles",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Role"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "Role.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Role"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Roles/replaceOrCreate": {
            "post": {
                "tags": [
                    "Role"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "Role.replaceOrCreate__post_Roles_replaceOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Roles/upsertWithWhere": {
            "post": {
                "tags": [
                    "Role"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
                "operationId": "Role.upsertWithWhere",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Roles/{id}/exists": {
            "get": {
                "tags": [
                    "Role"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Role.exists__get_Roles_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Roles/{id}": {
            "head": {
                "tags": [
                    "Role"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "Role.exists__head_Roles_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Role"
                ],
                "summary": "Find a model instance by {{id}} from the data source.",
                "operationId": "Role.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Role"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "Role.replaceById__put_Roles_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Role"
                ],
                "summary": "Delete a model instance by {{id}} from the data source.",
                "operationId": "Role.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "Role"
                ],
                "summary": "Patch attributes for a model instance and persist it into the data source.",
                "operationId": "Role.prototype.patchAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Roles/{id}/replace": {
            "post": {
                "tags": [
                    "Role"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "Role.replaceById__post_Roles_{id}_replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Roles/findOne": {
            "get": {
                "tags": [
                    "Role"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "Role.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Roles/update": {
            "post": {
                "tags": [
                    "Role"
                ],
                "summary": "Update instances of the model matched by {{where}} from the data source.",
                "operationId": "Role.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "Information related to the outcome of the operation",
                            "type": "object",
                            "properties": {
                                "count": {
                                    "description": "The number of instances updated",
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Roles/count": {
            "get": {
                "tags": [
                    "Role"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "Role.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/Roles/change-stream": {
            "post": {
                "tags": [
                    "Role"
                ],
                "summary": "Create a change stream.",
                "operationId": "Role.createChangeStream__post_Roles_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "Role"
                ],
                "summary": "Create a change stream.",
                "operationId": "Role.createChangeStream__get_Roles_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/{id}/accessTokens/{fk}": {
            "get": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Find a related item by id for accessTokens.",
                "operationId": "backendUser.prototype.__findById__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "backendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for accessTokens",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Delete a related item by id for accessTokens.",
                "operationId": "backendUser.prototype.__destroyById__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "backendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for accessTokens",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Update a related item by id for accessTokens.",
                "operationId": "backendUser.prototype.__updateById__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "backendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for accessTokens",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/{id}/accessTokens": {
            "get": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Queries accessTokens of backendUser.",
                "operationId": "backendUser.prototype.__get__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "backendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AccessToken"
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Creates a new instance in accessTokens of this model.",
                "operationId": "backendUser.prototype.__create__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "backendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Deletes all accessTokens of this model.",
                "operationId": "backendUser.prototype.__delete__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "backendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/{id}/accessTokens/count": {
            "get": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Counts accessTokens of backendUser.",
                "operationId": "backendUser.prototype.__count__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "backendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers": {
            "post": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "backendUser.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Patch an existing model instance or insert a new one into the data source.",
                "operationId": "backendUser.patchOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "backendUser.replaceOrCreate__put_backendUsers",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "backendUser.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/backendUser"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/replaceOrCreate": {
            "post": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "backendUser.replaceOrCreate__post_backendUsers_replaceOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/upsertWithWhere": {
            "post": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
                "operationId": "backendUser.upsertWithWhere",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/{id}/exists": {
            "get": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "backendUser.exists__get_backendUsers_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/{id}": {
            "head": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "backendUser.exists__head_backendUsers_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Find a model instance by {{id}} from the data source.",
                "operationId": "backendUser.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "backendUser.replaceById__put_backendUsers_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Delete a model instance by {{id}} from the data source.",
                "operationId": "backendUser.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Patch attributes for a model instance and persist it into the data source.",
                "operationId": "backendUser.prototype.patchAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "backendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/{id}/replace": {
            "post": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "backendUser.replaceById__post_backendUsers_{id}_replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/findOne": {
            "get": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "backendUser.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/update": {
            "post": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Update instances of the model matched by {{where}} from the data source.",
                "operationId": "backendUser.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "Information related to the outcome of the operation",
                            "type": "object",
                            "properties": {
                                "count": {
                                    "description": "The number of instances updated",
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/count": {
            "get": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "backendUser.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/change-stream": {
            "post": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Create a change stream.",
                "operationId": "backendUser.createChangeStream__post_backendUsers_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Create a change stream.",
                "operationId": "backendUser.createChangeStream__get_backendUsers_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/login": {
            "post": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Login a user with username/email and password.",
                "operationId": "backendUser.login",
                "parameters": [
                    {
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Related objects to include in the response. See the description of return value for more details.",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The response body contains properties of the AccessToken created on login.\nDepending on the value of `include` parameter, the body may contain additional properties:\n\n  - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)\n\n",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/logout": {
            "post": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Logout a user with access token.",
                "operationId": "backendUser.logout",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/{id}/verify": {
            "post": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Trigger user's identity verification with configured verifyOptions",
                "operationId": "backendUser.prototype.verify",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "backendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/confirm": {
            "get": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Confirm a user registration with identity verification token.",
                "operationId": "backendUser.confirm",
                "parameters": [
                    {
                        "name": "uid",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "redirect",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/reset": {
            "post": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Reset password for a user with email.",
                "operationId": "backendUser.resetPassword",
                "parameters": [
                    {
                        "name": "options",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/change-password": {
            "post": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Change a user's password.",
                "operationId": "backendUser.changePassword",
                "parameters": [
                    {
                        "name": "oldPassword",
                        "in": "formData",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "newPassword",
                        "in": "formData",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/reset-password": {
            "post": {
                "tags": [
                    "backendUser"
                ],
                "summary": "Reset user's password via a password-reset token.",
                "operationId": "backendUser.setPassword",
                "parameters": [
                    {
                        "name": "newPassword",
                        "in": "formData",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/backendUsers/{id}/getResetToken": {
            "get": {
                "tags": [
                    "backendUser"
                ],
                "operationId": "backendUser.getResetToken",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/{id}/accessTokens/{fk}": {
            "get": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Find a related item by id for accessTokens.",
                "operationId": "rootUser.prototype.__findById__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "rootUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for accessTokens",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Delete a related item by id for accessTokens.",
                "operationId": "rootUser.prototype.__destroyById__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "rootUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for accessTokens",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Update a related item by id for accessTokens.",
                "operationId": "rootUser.prototype.__updateById__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "rootUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for accessTokens",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/{id}/accessTokens": {
            "get": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Queries accessTokens of rootUser.",
                "operationId": "rootUser.prototype.__get__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "rootUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AccessToken"
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Creates a new instance in accessTokens of this model.",
                "operationId": "rootUser.prototype.__create__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "rootUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Deletes all accessTokens of this model.",
                "operationId": "rootUser.prototype.__delete__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "rootUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/{id}/accessTokens/count": {
            "get": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Counts accessTokens of rootUser.",
                "operationId": "rootUser.prototype.__count__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "rootUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers": {
            "post": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "rootUser.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Patch an existing model instance or insert a new one into the data source.",
                "operationId": "rootUser.patchOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "rootUser.replaceOrCreate__put_rootUsers",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "rootUser.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/rootUser"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/replaceOrCreate": {
            "post": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "rootUser.replaceOrCreate__post_rootUsers_replaceOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/upsertWithWhere": {
            "post": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
                "operationId": "rootUser.upsertWithWhere",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/{id}/exists": {
            "get": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "rootUser.exists__get_rootUsers_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/{id}": {
            "head": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "rootUser.exists__head_rootUsers_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Find a model instance by {{id}} from the data source.",
                "operationId": "rootUser.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "rootUser.replaceById__put_rootUsers_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Delete a model instance by {{id}} from the data source.",
                "operationId": "rootUser.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Patch attributes for a model instance and persist it into the data source.",
                "operationId": "rootUser.prototype.patchAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "rootUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/{id}/replace": {
            "post": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "rootUser.replaceById__post_rootUsers_{id}_replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/findOne": {
            "get": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "rootUser.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/update": {
            "post": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Update instances of the model matched by {{where}} from the data source.",
                "operationId": "rootUser.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/rootUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "Information related to the outcome of the operation",
                            "type": "object",
                            "properties": {
                                "count": {
                                    "description": "The number of instances updated",
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/count": {
            "get": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "rootUser.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/change-stream": {
            "post": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Create a change stream.",
                "operationId": "rootUser.createChangeStream__post_rootUsers_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Create a change stream.",
                "operationId": "rootUser.createChangeStream__get_rootUsers_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/login": {
            "post": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Login a user with username/email and password.",
                "operationId": "rootUser.login",
                "parameters": [
                    {
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Related objects to include in the response. See the description of return value for more details.",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The response body contains properties of the AccessToken created on login.\nDepending on the value of `include` parameter, the body may contain additional properties:\n\n  - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)\n\n",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/logout": {
            "post": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Logout a user with access token.",
                "operationId": "rootUser.logout",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/{id}/verify": {
            "post": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Trigger user's identity verification with configured verifyOptions",
                "operationId": "rootUser.prototype.verify",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "rootUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/confirm": {
            "get": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Confirm a user registration with identity verification token.",
                "operationId": "rootUser.confirm",
                "parameters": [
                    {
                        "name": "uid",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "redirect",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/reset": {
            "post": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Reset password for a user with email.",
                "operationId": "rootUser.resetPassword",
                "parameters": [
                    {
                        "name": "options",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/change-password": {
            "post": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Change a user's password.",
                "operationId": "rootUser.changePassword",
                "parameters": [
                    {
                        "name": "oldPassword",
                        "in": "formData",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "newPassword",
                        "in": "formData",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/reset-password": {
            "post": {
                "tags": [
                    "rootUser"
                ],
                "summary": "Reset user's password via a password-reset token.",
                "operationId": "rootUser.setPassword",
                "parameters": [
                    {
                        "name": "newPassword",
                        "in": "formData",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/rootUsers/{id}/getResetToken": {
            "get": {
                "tags": [
                    "rootUser"
                ],
                "operationId": "rootUser.getResetToken",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/{id}/accessTokens/{fk}": {
            "get": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Find a related item by id for accessTokens.",
                "operationId": "frontendUser.prototype.__findById__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "frontendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for accessTokens",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Delete a related item by id for accessTokens.",
                "operationId": "frontendUser.prototype.__destroyById__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "frontendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for accessTokens",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Update a related item by id for accessTokens.",
                "operationId": "frontendUser.prototype.__updateById__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "frontendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for accessTokens",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/{id}/accessTokens": {
            "get": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Queries accessTokens of frontendUser.",
                "operationId": "frontendUser.prototype.__get__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "frontendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AccessToken"
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Creates a new instance in accessTokens of this model.",
                "operationId": "frontendUser.prototype.__create__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "frontendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Deletes all accessTokens of this model.",
                "operationId": "frontendUser.prototype.__delete__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "frontendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/{id}/accessTokens/count": {
            "get": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Counts accessTokens of frontendUser.",
                "operationId": "frontendUser.prototype.__count__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "frontendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers": {
            "post": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "frontendUser.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Patch an existing model instance or insert a new one into the data source.",
                "operationId": "frontendUser.patchOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "frontendUser.replaceOrCreate__put_frontendUsers",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "frontendUser.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/frontendUser"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/replaceOrCreate": {
            "post": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "frontendUser.replaceOrCreate__post_frontendUsers_replaceOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/upsertWithWhere": {
            "post": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
                "operationId": "frontendUser.upsertWithWhere",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/{id}/exists": {
            "get": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "frontendUser.exists__get_frontendUsers_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/{id}": {
            "head": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "frontendUser.exists__head_frontendUsers_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Find a model instance by {{id}} from the data source.",
                "operationId": "frontendUser.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "frontendUser.replaceById__put_frontendUsers_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Delete a model instance by {{id}} from the data source.",
                "operationId": "frontendUser.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Patch attributes for a model instance and persist it into the data source.",
                "operationId": "frontendUser.prototype.patchAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "frontendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/{id}/replace": {
            "post": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "frontendUser.replaceById__post_frontendUsers_{id}_replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/findOne": {
            "get": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "frontendUser.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/update": {
            "post": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Update instances of the model matched by {{where}} from the data source.",
                "operationId": "frontendUser.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "Information related to the outcome of the operation",
                            "type": "object",
                            "properties": {
                                "count": {
                                    "description": "The number of instances updated",
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/count": {
            "get": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "frontendUser.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/change-stream": {
            "post": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Create a change stream.",
                "operationId": "frontendUser.createChangeStream__post_frontendUsers_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Create a change stream.",
                "operationId": "frontendUser.createChangeStream__get_frontendUsers_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/login": {
            "post": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Login a user with username and password.",
                "operationId": "frontendUser.login__post_frontendUsers_login",
                "parameters": [
                    {
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/logout": {
            "post": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Logout a user with access token.",
                "operationId": "frontendUser.logout",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/{id}/verify": {
            "post": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Trigger user's identity verification with configured verifyOptions",
                "operationId": "frontendUser.prototype.verify",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "frontendUser id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/confirm": {
            "get": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Confirm a user registration with identity verification token.",
                "operationId": "frontendUser.confirm",
                "parameters": [
                    {
                        "name": "uid",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "redirect",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/reset": {
            "post": {
                "tags": [
                    "frontendUser"
                ],
                "operationId": "frontendUser.reset",
                "parameters": [
                    {
                        "name": "userEmail",
                        "in": "formData",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/change-password": {
            "post": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Change a user's password.",
                "operationId": "frontendUser.changePassword",
                "parameters": [
                    {
                        "name": "oldPassword",
                        "in": "formData",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "newPassword",
                        "in": "formData",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/reset-password": {
            "post": {
                "tags": [
                    "frontendUser"
                ],
                "summary": "Reset user's password via a password-reset token.",
                "operationId": "frontendUser.setPassword",
                "parameters": [
                    {
                        "name": "newPassword",
                        "in": "formData",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/getAPITokenForInstagramUser": {
            "post": {
                "tags": [
                    "frontendUser"
                ],
                "operationId": "frontendUser.getAPITokenForInstagramUser",
                "parameters": [
                    {
                        "name": "username",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "oauthToken",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "body": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/frontendUsers/subscibePushNotificationTopics": {
            "post": {
                "tags": [
                    "frontendUser"
                ],
                "operationId": "frontendUser.subscibePushNotificationTopics",
                "parameters": [
                    {
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/storages": {
            "get": {
                "tags": [
                    "storage"
                ],
                "operationId": "storage.getContainers",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/x-any"
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "storage"
                ],
                "operationId": "storage.createContainer",
                "parameters": [
                    {
                        "name": "options",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/storages/{container}": {
            "delete": {
                "tags": [
                    "storage"
                ],
                "operationId": "storage.destroyContainer",
                "parameters": [
                    {
                        "name": "container",
                        "in": "path",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "undefined": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "storage"
                ],
                "operationId": "storage.getContainer",
                "parameters": [
                    {
                        "name": "container",
                        "in": "path",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/storages/{container}/files": {
            "get": {
                "tags": [
                    "storage"
                ],
                "operationId": "storage.getFiles",
                "parameters": [
                    {
                        "name": "container",
                        "in": "path",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/x-any"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/storages/{container}/files/{file}": {
            "get": {
                "tags": [
                    "storage"
                ],
                "operationId": "storage.getFile",
                "parameters": [
                    {
                        "name": "container",
                        "in": "path",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "path",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "storage"
                ],
                "operationId": "storage.removeFile",
                "parameters": [
                    {
                        "name": "container",
                        "in": "path",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "path",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "undefined": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/storages/{container}/upload": {
            "post": {
                "tags": [
                    "storage"
                ],
                "operationId": "storage.upload",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "result": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/storages/{container}/download/{file}": {
            "get": {
                "tags": [
                    "storage"
                ],
                "operationId": "storage.download",
                "parameters": [
                    {
                        "name": "container",
                        "in": "path",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "path",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/fileInfos": {
            "post": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "fileInfo.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Patch an existing model instance or insert a new one into the data source.",
                "operationId": "fileInfo.patchOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "fileInfo.replaceOrCreate__put_fileInfos",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "fileInfo.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/fileInfo"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/fileInfos/replaceOrCreate": {
            "post": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "fileInfo.replaceOrCreate__post_fileInfos_replaceOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/fileInfos/upsertWithWhere": {
            "post": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
                "operationId": "fileInfo.upsertWithWhere",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/fileInfos/{id}/exists": {
            "get": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "fileInfo.exists__get_fileInfos_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/fileInfos/{id}": {
            "head": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "fileInfo.exists__head_fileInfos_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Find a model instance by {{id}} from the data source.",
                "operationId": "fileInfo.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "fileInfo.replaceById__put_fileInfos_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Delete a model instance by {{id}} from the data source.",
                "operationId": "fileInfo.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Patch attributes for a model instance and persist it into the data source.",
                "operationId": "fileInfo.prototype.patchAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "fileInfo id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/fileInfos/{id}/replace": {
            "post": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "fileInfo.replaceById__post_fileInfos_{id}_replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/fileInfos/findOne": {
            "get": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "fileInfo.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/fileInfos/update": {
            "post": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Update instances of the model matched by {{where}} from the data source.",
                "operationId": "fileInfo.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/fileInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "Information related to the outcome of the operation",
                            "type": "object",
                            "properties": {
                                "count": {
                                    "description": "The number of instances updated",
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/fileInfos/count": {
            "get": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "fileInfo.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/fileInfos/change-stream": {
            "post": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Create a change stream.",
                "operationId": "fileInfo.createChangeStream__post_fileInfos_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "fileInfo"
                ],
                "summary": "Create a change stream.",
                "operationId": "fileInfo.createChangeStream__get_fileInfos_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/fileInfos/download": {
            "get": {
                "tags": [
                    "fileInfo"
                ],
                "operationId": "fileInfo.download",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "undefined": {
                                    "type": "object"
                                },
                                "Content-Type": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/{id}/idOfRecipient": {
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Fetches belongsTo relation idOfRecipient.",
                "operationId": "pushNotificationEmail.prototype.__get__idOfRecipient",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pushNotificationEmail id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/{id}/fullNameOfRecipient": {
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Fetches belongsTo relation fullNameOfRecipient.",
                "operationId": "pushNotificationEmail.prototype.__get__fullNameOfRecipient",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pushNotificationEmail id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/{id}/userNameOfRecipient": {
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Fetches belongsTo relation userNameOfRecipient.",
                "operationId": "pushNotificationEmail.prototype.__get__userNameOfRecipient",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pushNotificationEmail id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/{id}/emailOfRecipient": {
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Fetches belongsTo relation emailOfRecipient.",
                "operationId": "pushNotificationEmail.prototype.__get__emailOfRecipient",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pushNotificationEmail id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/{id}/idOfBackendSender": {
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Fetches belongsTo relation idOfBackendSender.",
                "operationId": "pushNotificationEmail.prototype.__get__idOfBackendSender",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pushNotificationEmail id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/{id}/fullNameOfBackendSender": {
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Fetches belongsTo relation fullNameOfBackendSender.",
                "operationId": "pushNotificationEmail.prototype.__get__fullNameOfBackendSender",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pushNotificationEmail id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/{id}/userNameOfBackendSender": {
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Fetches belongsTo relation userNameOfBackendSender.",
                "operationId": "pushNotificationEmail.prototype.__get__userNameOfBackendSender",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pushNotificationEmail id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/{id}/emailOfBackendSender": {
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Fetches belongsTo relation emailOfBackendSender.",
                "operationId": "pushNotificationEmail.prototype.__get__emailOfBackendSender",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pushNotificationEmail id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/backendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/{id}/idOfFrontendSender": {
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Fetches belongsTo relation idOfFrontendSender.",
                "operationId": "pushNotificationEmail.prototype.__get__idOfFrontendSender",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pushNotificationEmail id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/{id}/fullNameOfFrontendSender": {
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Fetches belongsTo relation fullNameOfFrontendSender.",
                "operationId": "pushNotificationEmail.prototype.__get__fullNameOfFrontendSender",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pushNotificationEmail id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/{id}/userNameOfFrontendSender": {
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Fetches belongsTo relation userNameOfFrontendSender.",
                "operationId": "pushNotificationEmail.prototype.__get__userNameOfFrontendSender",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pushNotificationEmail id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/{id}/emailOfFrontendSender": {
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Fetches belongsTo relation emailOfFrontendSender.",
                "operationId": "pushNotificationEmail.prototype.__get__emailOfFrontendSender",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pushNotificationEmail id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "refresh",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/frontendUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails": {
            "post": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "pushNotificationEmail.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Patch an existing model instance or insert a new one into the data source.",
                "operationId": "pushNotificationEmail.patchOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "pushNotificationEmail.replaceOrCreate__put_pushNotificationEmails",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "pushNotificationEmail.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pushNotificationEmail"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/replaceOrCreate": {
            "post": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "pushNotificationEmail.replaceOrCreate__post_pushNotificationEmails_replaceOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/upsertWithWhere": {
            "post": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
                "operationId": "pushNotificationEmail.upsertWithWhere",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/{id}/exists": {
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "pushNotificationEmail.exists__get_pushNotificationEmails_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/{id}": {
            "head": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "pushNotificationEmail.exists__head_pushNotificationEmails_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Find a model instance by {{id}} from the data source.",
                "operationId": "pushNotificationEmail.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "pushNotificationEmail.replaceById__put_pushNotificationEmails_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Delete a model instance by {{id}} from the data source.",
                "operationId": "pushNotificationEmail.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Patch attributes for a model instance and persist it into the data source.",
                "operationId": "pushNotificationEmail.prototype.patchAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pushNotificationEmail id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/{id}/replace": {
            "post": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "pushNotificationEmail.replaceById__post_pushNotificationEmails_{id}_replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/findOne": {
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "pushNotificationEmail.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/update": {
            "post": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Update instances of the model matched by {{where}} from the data source.",
                "operationId": "pushNotificationEmail.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/pushNotificationEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "Information related to the outcome of the operation",
                            "type": "object",
                            "properties": {
                                "count": {
                                    "description": "The number of instances updated",
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/count": {
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "pushNotificationEmail.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/change-stream": {
            "post": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Create a change stream.",
                "operationId": "pushNotificationEmail.createChangeStream__post_pushNotificationEmails_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Create a change stream.",
                "operationId": "pushNotificationEmail.createChangeStream__get_pushNotificationEmails_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/pushNotificationEmails/updateJoiningRequestStatus": {
            "post": {
                "tags": [
                    "pushNotificationEmail"
                ],
                "summary": "Process approval status of a joining request and send push notification to sender",
                "operationId": "pushNotificationEmail.updateJoiningRequestStatus",
                "parameters": [
                    {
                        "name": "pushNotificationEmail",
                        "in": "body",
                        "description": "Notification object sent to market owner",
                        "required": true,
                        "schema": {
                            "description": "Notification object sent to market owner",
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/analyticDatas": {
            "post": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "analyticData.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Patch an existing model instance or insert a new one into the data source.",
                "operationId": "analyticData.patchOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "analyticData.replaceOrCreate__put_analyticDatas",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "analyticData.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/analyticData"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/analyticDatas/replaceOrCreate": {
            "post": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "analyticData.replaceOrCreate__post_analyticDatas_replaceOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/analyticDatas/upsertWithWhere": {
            "post": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
                "operationId": "analyticData.upsertWithWhere",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/analyticDatas/{id}/exists": {
            "get": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "analyticData.exists__get_analyticDatas_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/analyticDatas/{id}": {
            "head": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "analyticData.exists__head_analyticDatas_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Find a model instance by {{id}} from the data source.",
                "operationId": "analyticData.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "analyticData.replaceById__put_analyticDatas_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Delete a model instance by {{id}} from the data source.",
                "operationId": "analyticData.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Patch attributes for a model instance and persist it into the data source.",
                "operationId": "analyticData.prototype.patchAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "analyticData id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/analyticDatas/{id}/replace": {
            "post": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "analyticData.replaceById__post_analyticDatas_{id}_replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/analyticDatas/findOne": {
            "get": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "analyticData.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/analyticDatas/update": {
            "post": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Update instances of the model matched by {{where}} from the data source.",
                "operationId": "analyticData.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/analyticData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "Information related to the outcome of the operation",
                            "type": "object",
                            "properties": {
                                "count": {
                                    "description": "The number of instances updated",
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/analyticDatas/count": {
            "get": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "analyticData.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/analyticDatas/change-stream": {
            "post": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Create a change stream.",
                "operationId": "analyticData.createChangeStream__post_analyticDatas_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "analyticData"
                ],
                "summary": "Create a change stream.",
                "operationId": "analyticData.createChangeStream__get_analyticDatas_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businesses": {
            "post": {
                "tags": [
                    "business"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "business.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/business"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/business"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "business"
                ],
                "summary": "Patch an existing model instance or insert a new one into the data source.",
                "operationId": "business.patchOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/business"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/business"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "business"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "business.replaceOrCreate__put_businesses",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/business"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/business"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "business"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "business.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/business"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businesses/replaceOrCreate": {
            "post": {
                "tags": [
                    "business"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "business.replaceOrCreate__post_businesses_replaceOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/business"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/business"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businesses/upsertWithWhere": {
            "post": {
                "tags": [
                    "business"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
                "operationId": "business.upsertWithWhere",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/business"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/business"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businesses/{id}/exists": {
            "get": {
                "tags": [
                    "business"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "business.exists__get_businesses_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businesses/{id}": {
            "head": {
                "tags": [
                    "business"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "business.exists__head_businesses_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "business"
                ],
                "summary": "Find a model instance by {{id}} from the data source.",
                "operationId": "business.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/business"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "business"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "business.replaceById__put_businesses_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/business"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/business"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "business"
                ],
                "summary": "Delete a model instance by {{id}} from the data source.",
                "operationId": "business.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "business"
                ],
                "summary": "Patch attributes for a model instance and persist it into the data source.",
                "operationId": "business.prototype.patchAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "business id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/business"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/business"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businesses/{id}/replace": {
            "post": {
                "tags": [
                    "business"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "business.replaceById__post_businesses_{id}_replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/business"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/business"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businesses/findOne": {
            "get": {
                "tags": [
                    "business"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "business.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/business"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businesses/update": {
            "post": {
                "tags": [
                    "business"
                ],
                "summary": "Update instances of the model matched by {{where}} from the data source.",
                "operationId": "business.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/business"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "Information related to the outcome of the operation",
                            "type": "object",
                            "properties": {
                                "count": {
                                    "description": "The number of instances updated",
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businesses/count": {
            "get": {
                "tags": [
                    "business"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "business.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businesses/change-stream": {
            "post": {
                "tags": [
                    "business"
                ],
                "summary": "Create a change stream.",
                "operationId": "business.createChangeStream__post_businesses_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "business"
                ],
                "summary": "Create a change stream.",
                "operationId": "business.createChangeStream__get_businesses_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessCategories": {
            "post": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "businessCategory.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Patch an existing model instance or insert a new one into the data source.",
                "operationId": "businessCategory.patchOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "businessCategory.replaceOrCreate__put_businessCategories",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "businessCategory.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/businessCategory"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessCategories/replaceOrCreate": {
            "post": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "businessCategory.replaceOrCreate__post_businessCategories_replaceOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessCategories/upsertWithWhere": {
            "post": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
                "operationId": "businessCategory.upsertWithWhere",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessCategories/{id}/exists": {
            "get": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "businessCategory.exists__get_businessCategories_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessCategories/{id}": {
            "head": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "businessCategory.exists__head_businessCategories_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Find a model instance by {{id}} from the data source.",
                "operationId": "businessCategory.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "businessCategory.replaceById__put_businessCategories_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Delete a model instance by {{id}} from the data source.",
                "operationId": "businessCategory.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Patch attributes for a model instance and persist it into the data source.",
                "operationId": "businessCategory.prototype.patchAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "businessCategory id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessCategories/{id}/replace": {
            "post": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "businessCategory.replaceById__post_businessCategories_{id}_replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessCategories/findOne": {
            "get": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "businessCategory.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessCategories/update": {
            "post": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Update instances of the model matched by {{where}} from the data source.",
                "operationId": "businessCategory.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/businessCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "Information related to the outcome of the operation",
                            "type": "object",
                            "properties": {
                                "count": {
                                    "description": "The number of instances updated",
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessCategories/count": {
            "get": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "businessCategory.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessCategories/change-stream": {
            "post": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Create a change stream.",
                "operationId": "businessCategory.createChangeStream__post_businessCategories_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "businessCategory"
                ],
                "summary": "Create a change stream.",
                "operationId": "businessCategory.createChangeStream__get_businessCategories_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessPaymentTransactions": {
            "post": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "businessPaymentTransaction.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Patch an existing model instance or insert a new one into the data source.",
                "operationId": "businessPaymentTransaction.patchOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "businessPaymentTransaction.replaceOrCreate__put_businessPaymentTransactions",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "businessPaymentTransaction.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/businessPaymentTransaction"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessPaymentTransactions/replaceOrCreate": {
            "post": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Replace an existing model instance or insert a new one into the data source.",
                "operationId": "businessPaymentTransaction.replaceOrCreate__post_businessPaymentTransactions_replaceOrCreate",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessPaymentTransactions/upsertWithWhere": {
            "post": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
                "operationId": "businessPaymentTransaction.upsertWithWhere",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessPaymentTransactions/{id}/exists": {
            "get": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "businessPaymentTransaction.exists__get_businessPaymentTransactions_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessPaymentTransactions/{id}": {
            "head": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "businessPaymentTransaction.exists__head_businessPaymentTransactions_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "exists": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Find a model instance by {{id}} from the data source.",
                "operationId": "businessPaymentTransaction.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "businessPaymentTransaction.replaceById__put_businessPaymentTransactions_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Delete a model instance by {{id}} from the data source.",
                "operationId": "businessPaymentTransaction.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Patch attributes for a model instance and persist it into the data source.",
                "operationId": "businessPaymentTransaction.prototype.patchAttributes",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "businessPaymentTransaction id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessPaymentTransactions/{id}/replace": {
            "post": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Replace attributes for a model instance and persist it into the data source.",
                "operationId": "businessPaymentTransaction.replaceById__post_businessPaymentTransactions_{id}_replace",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "description": "Model instance data",
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessPaymentTransactions/findOne": {
            "get": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "businessPaymentTransaction.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessPaymentTransactions/update": {
            "post": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Update instances of the model matched by {{where}} from the data source.",
                "operationId": "businessPaymentTransaction.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "description": "An object of model property name/value pairs",
                            "$ref": "#/definitions/businessPaymentTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "Information related to the outcome of the operation",
                            "type": "object",
                            "properties": {
                                "count": {
                                    "description": "The number of instances updated",
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessPaymentTransactions/count": {
            "get": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "businessPaymentTransaction.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/businessPaymentTransactions/change-stream": {
            "post": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Create a change stream.",
                "operationId": "businessPaymentTransaction.createChangeStream__post_businessPaymentTransactions_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "businessPaymentTransaction"
                ],
                "summary": "Create a change stream.",
                "operationId": "businessPaymentTransaction.createChangeStream__get_businessPaymentTransactions_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "deprecated": false
            }
        }
    },
    "tags": [
        {
            "name": "Role"
        },
        {
            "name": "backendUser"
        },
        {
            "name": "rootUser"
        },
        {
            "name": "frontendUser"
        },
        {
            "name": "storage"
        },
        {
            "name": "fileInfo"
        },
        {
            "name": "pushNotificationEmail"
        },
        {
            "name": "analyticData"
        },
        {
            "name": "business"
        },
        {
            "name": "businessCategory"
        },
        {
            "name": "businessPaymentTransaction"
        }
    ],
    "consumes": [
        "application/json",
        "application/x-www-form-urlencoded",
        "application/xml",
        "text/xml"
    ],
    "produces": [
        "application/json",
        "application/xml",
        "text/xml",
        "application/javascript",
        "text/javascript"
    ],
    "definitions": {
        "x-any": {
            "properties": {}
        },
        "RoleMapping": {
            "description": "Map principals to roles",
            "properties": {
                "id": {
                    "$ref": "#/definitions/ObjectID"
                },
                "principalType": {
                    "description": "The principal type, such as USER, APPLICATION, ROLE, or user model name in case of multiple user models",
                    "type": "string"
                },
                "principalId": {
                    "type": "string"
                },
                "roleId": {
                    "$ref": "#/definitions/ObjectID"
                }
            },
            "additionalProperties": false
        },
        "Role": {
            "properties": {
                "id": {
                    "$ref": "#/definitions/ObjectID"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "created": {
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "required": [
                "name"
            ],
            "additionalProperties": false
        },
        "AccessToken": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "ttl": {
                    "default": 1209600,
                    "description": "time to live in seconds (2 weeks by default)",
                    "type": "number",
                    "format": "double"
                },
                "scopes": {
                    "description": "Array of scopes granted to this access token.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created": {
                    "type": "string",
                    "format": "date-time"
                },
                "userId": {
                    "$ref": "#/definitions/ObjectID"
                }
            },
            "required": [
                "id"
            ],
            "additionalProperties": false
        },
        "backendUser": {
            "properties": {
                "tel": {
                    "type": "string"
                },
                "avatar": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "lock": {
                    "default": false,
                    "type": "boolean"
                },
                "lockReason": {
                    "type": "string"
                },
                "lockBy": {
                    "type": "string"
                },
                "realm": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "emailVerified": {
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/ObjectID"
                }
            },
            "required": [
                "email"
            ],
            "additionalProperties": false
        },
        "rootUser": {
            "properties": {
                "tel": {
                    "type": "string"
                },
                "avatar": {
                    "type": "string"
                },
                "realm": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "emailVerified": {
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/ObjectID"
                }
            },
            "required": [
                "email"
            ],
            "additionalProperties": false
        },
        "frontendUser": {
            "properties": {
                "type": {
                    "default": "default",
                    "type": "string"
                },
                "userEmail": {
                    "type": "string"
                },
                "tel": {
                    "type": "string"
                },
                "avatar": {
                    "type": "string"
                },
                "oauthToken": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/GeoPoint"
                },
                "lock": {
                    "default": false,
                    "type": "boolean"
                },
                "lockReason": {
                    "type": "string"
                },
                "lockBy": {
                    "type": "string"
                },
                "notificationKey": {
                    "type": "string"
                },
                "createDate": {
                    "default": "$now",
                    "type": "string",
                    "format": "date-time"
                },
                "realm": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "emailVerified": {
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/ObjectID"
                }
            },
            "required": [
                "type"
            ],
            "additionalProperties": false
        },
        "fileInfo": {
            "properties": {
                "owner": {
                    "type": "string"
                },
                "uploadTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "container": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/ObjectID"
                }
            },
            "required": [
                "owner",
                "uploadTime",
                "container",
                "name",
                "type"
            ],
            "additionalProperties": false
        },
        "pushNotificationEmail": {
            "properties": {
                "recipientId": {
                    "$ref": "#/definitions/ObjectID"
                },
                "recipientUserName": {
                    "type": "string"
                },
                "recipientFullName": {
                    "type": "string"
                },
                "recipientEmail": {
                    "type": "string"
                },
                "backendSenderId": {
                    "$ref": "#/definitions/ObjectID"
                },
                "backendSenderUserName": {
                    "type": "string"
                },
                "backendSenderFullName": {
                    "type": "string"
                },
                "backendSenderEmail": {
                    "type": "string"
                },
                "frontendSenderId": {
                    "$ref": "#/definitions/ObjectID"
                },
                "frontendSenderUserName": {
                    "type": "string"
                },
                "frontendSenderFullName": {
                    "type": "string"
                },
                "frontendSenderEmail": {
                    "type": "string"
                },
                "topic": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "contentType": {
                    "type": "string"
                },
                "sendDate": {
                    "default": "$now",
                    "type": "string",
                    "format": "date-time"
                },
                "type": {
                    "type": "string"
                },
                "status": {
                    "default": "sending",
                    "type": "string"
                },
                "notificationKey": {
                    "type": "string"
                },
                "notificationParams": {
                    "type": "object"
                },
                "read": {
                    "default": false,
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/ObjectID"
                }
            },
            "required": [
                "contentType",
                "type"
            ],
            "additionalProperties": false
        },
        "analyticData": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "criterial": {
                    "type": "string"
                },
                "amount": {
                    "default": 0,
                    "type": "number",
                    "format": "double"
                },
                "lastUpdate": {
                    "default": "$now",
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "$ref": "#/definitions/ObjectID"
                }
            },
            "required": [
                "type",
                "criterial",
                "amount"
            ],
            "additionalProperties": false
        },
        "business": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "logo": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "email": {
                    "type": "string"
                },
                "tel": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/GeoPoint"
                },
                "createDate": {
                    "default": "$now",
                    "type": "string",
                    "format": "date-time"
                },
                "subscriptionType": {
                    "type": "string"
                },
                "logoStatus": {
                    "type": "string"
                },
                "approved": {
                    "type": "string"
                },
                "rejectReason": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "$ref": "#/definitions/ObjectID"
                }
            },
            "required": [
                "name",
                "email",
                "subscriptionType",
                "logoStatus",
                "approved"
            ],
            "additionalProperties": false
        },
        "businessCategory": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "createDate": {
                    "default": "$now",
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "$ref": "#/definitions/ObjectID"
                }
            },
            "required": [
                "name"
            ],
            "additionalProperties": false
        },
        "businessPaymentTransaction": {
            "properties": {
                "businessId": {
                    "type": "string"
                },
                "purchaseDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "purchaseId": {
                    "type": "string"
                },
                "purchaseStatus": {
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/ObjectID"
                }
            },
            "required": [
                "businessId",
                "purchaseDate",
                "purchaseId",
                "purchaseStatus"
            ],
            "additionalProperties": false
        },
        "ObjectID": {
            "type": "string",
            "pattern": "^[a-fA-F\\d]{24}$"
        },
        "GeoPoint": {
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                }
            }
        }
    }
});